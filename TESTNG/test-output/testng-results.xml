<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="3" total="15" passed="10" failed="2" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2025-04-16T17:59:48 IST" name="Loan Department" finished-at="2025-04-16T17:59:48 IST" duration-ms="199">
    <groups>
      <group name="Smoke">
        <method signature="Day2.ploan()[pri:0, instance:basics.Day2@6b927fb]" name="ploan" class="basics.Day2"/>
        <method signature="Day4.mobileLoginHomeLoan()[pri:0, instance:basics.Day4@3e58a80e]" name="mobileLoginHomeLoan" class="basics.Day4"/>
        <method signature="Day3.mobileSignoutCarLoan()[pri:0, instance:basics.Day3@1aafa419]" name="mobileSignoutCarLoan" class="basics.Day3"/>
      </group> <!-- Smoke -->
    </groups>
    <test started-at="2025-04-16T17:59:48 IST" name="Personal Loan" finished-at="2025-04-16T17:59:48 IST" duration-ms="84">
      <class name="basics.Day1">
        <test-method signature="demo()[pri:0, instance:basics.Day1@4f18837a]" started-at="2025-04-16T17:59:48 IST" name="demo" finished-at="2025-04-16T17:59:48 IST" duration-ms="17" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1590)
at org.testng.Assert.assertTrue(Assert.java:57)
at org.testng.Assert.assertTrue(Assert.java:67)
at basics.Day1.demo(Day1.java:14)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:569)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:687)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:995)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:741)
at org.testng.TestRunner.run(TestRunner.java:616)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- demo -->
      </class> <!-- basics.Day1 -->
      <class name="basics.Day2">
        <test-method is-config="true" signature="preRequiste()[pri:0, instance:basics.Day2@6b927fb]" started-at="2025-04-16T17:59:48 IST" name="preRequiste" finished-at="2025-04-16T17:59:48 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- preRequiste -->
        <test-method signature="ploan()[pri:0, instance:basics.Day2@6b927fb]" started-at="2025-04-16T17:59:48 IST" name="ploan" finished-at="2025-04-16T17:59:48 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ploan -->
        <test-method is-config="true" signature="lastExecution()[pri:0, instance:basics.Day2@6b927fb]" started-at="2025-04-16T17:59:48 IST" name="lastExecution" finished-at="2025-04-16T17:59:48 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- lastExecution -->
      </class> <!-- basics.Day2 -->
      <class name="basics.Day4">
        <test-method signature="loginAPIHomeLoan()[pri:0, instance:basics.Day4@3e58a80e]" started-at="2025-04-16T17:59:48 IST" name="loginAPIHomeLoan" finished-at="2025-04-16T17:59:48 IST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginAPIHomeLoan -->
        <test-method signature="mobileLoginHomeLoan()[pri:0, instance:basics.Day4@3e58a80e]" started-at="2025-04-16T17:59:48 IST" name="mobileLoginHomeLoan" finished-at="2025-04-16T17:59:48 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- mobileLoginHomeLoan -->
        <test-method signature="webLoginHomeLoan(java.lang.String)[pri:0, instance:basics.Day4@3e58a80e]" started-at="2025-04-16T17:59:48 IST" name="webLoginHomeLoan" finished-at="2025-04-16T17:59:48 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[qaclickacademy.com]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- webLoginHomeLoan -->
      </class> <!-- basics.Day4 -->
    </test> <!-- Personal Loan -->
    <test started-at="2025-04-16T17:59:48 IST" name="Car Loan" finished-at="2025-04-16T17:59:48 IST" duration-ms="40">
      <class name="basics.Day1">
        <test-method signature="demo()[pri:0, instance:basics.Day1@47eaca72]" started-at="2025-04-16T17:59:48 IST" name="demo" finished-at="2025-04-16T17:59:48 IST" duration-ms="1" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1590)
at org.testng.Assert.assertTrue(Assert.java:57)
at org.testng.Assert.assertTrue(Assert.java:67)
at basics.Day1.demo(Day1.java:14)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:569)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:687)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:995)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:741)
at org.testng.TestRunner.run(TestRunner.java:616)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- demo -->
        <test-method signature="secondTest()[pri:0, instance:basics.Day1@47eaca72]" started-at="2025-04-16T17:59:48 IST" name="secondTest" finished-at="2025-04-16T17:59:48 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- secondTest -->
        <test-method is-config="true" signature="afSuite()[pri:0, instance:basics.Day1@47eaca72]" started-at="2025-04-16T17:59:48 IST" name="afSuite" finished-at="2025-04-16T17:59:48 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afSuite -->
      </class> <!-- basics.Day1 -->
      <class name="basics.Day3">
        <test-method is-config="true" signature="bfSuite()[pri:0, instance:basics.Day3@1aafa419]" started-at="2025-04-16T17:59:48 IST" name="bfSuite" finished-at="2025-04-16T17:59:48 IST" duration-ms="12" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- bfSuite -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:basics.Day3@1aafa419]" started-at="2025-04-16T17:59:48 IST" name="beforeClass" finished-at="2025-04-16T17:59:48 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeEvery()[pri:0, instance:basics.Day3@1aafa419]" started-at="2025-04-16T17:59:48 IST" name="beforeEvery" finished-at="2025-04-16T17:59:48 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeEvery -->
        <test-method signature="mobileLoginCarLoan(java.lang.String,java.lang.String)[pri:0, instance:basics.Day3@1aafa419]" started-at="2025-04-16T17:59:48 IST" name="mobileLoginCarLoan" data-provider="getData" finished-at="2025-04-16T17:59:48 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[firstSetUsername]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[firstpassword]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- mobileLoginCarLoan -->
        <test-method is-config="true" signature="afterEvery()[pri:0, instance:basics.Day3@1aafa419]" started-at="2025-04-16T17:59:48 IST" name="afterEvery" finished-at="2025-04-16T17:59:48 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEvery -->
        <test-method is-config="true" signature="beforeEvery()[pri:0, instance:basics.Day3@1aafa419]" started-at="2025-04-16T17:59:48 IST" name="beforeEvery" finished-at="2025-04-16T17:59:48 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeEvery -->
        <test-method signature="mobileLoginCarLoan(java.lang.String,java.lang.String)[pri:0, instance:basics.Day3@1aafa419]" started-at="2025-04-16T17:59:48 IST" name="mobileLoginCarLoan" data-provider="getData" finished-at="2025-04-16T17:59:48 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[secondSetUsername]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[secondpassword]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- mobileLoginCarLoan -->
        <test-method is-config="true" signature="afterEvery()[pri:0, instance:basics.Day3@1aafa419]" started-at="2025-04-16T17:59:48 IST" name="afterEvery" finished-at="2025-04-16T17:59:48 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEvery -->
        <test-method is-config="true" signature="beforeEvery()[pri:0, instance:basics.Day3@1aafa419]" started-at="2025-04-16T17:59:48 IST" name="beforeEvery" finished-at="2025-04-16T17:59:48 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeEvery -->
        <test-method signature="mobileLoginCarLoan(java.lang.String,java.lang.String)[pri:0, instance:basics.Day3@1aafa419]" started-at="2025-04-16T17:59:48 IST" name="mobileLoginCarLoan" data-provider="getData" finished-at="2025-04-16T17:59:48 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[thirdSetUsername]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[thirdpassword]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- mobileLoginCarLoan -->
        <test-method is-config="true" signature="afterEvery()[pri:0, instance:basics.Day3@1aafa419]" started-at="2025-04-16T17:59:48 IST" name="afterEvery" finished-at="2025-04-16T17:59:48 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEvery -->
        <test-method is-config="true" signature="beforeEvery()[pri:0, instance:basics.Day3@1aafa419]" started-at="2025-04-16T17:59:48 IST" name="beforeEvery" finished-at="2025-04-16T17:59:48 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeEvery -->
        <test-method signature="mobileSignoutCarLoan()[pri:0, instance:basics.Day3@1aafa419]" started-at="2025-04-16T17:59:48 IST" name="mobileSignoutCarLoan" finished-at="2025-04-16T17:59:48 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- mobileSignoutCarLoan -->
        <test-method is-config="true" signature="afterEvery()[pri:0, instance:basics.Day3@1aafa419]" started-at="2025-04-16T17:59:48 IST" name="afterEvery" finished-at="2025-04-16T17:59:48 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEvery -->
        <test-method signature="webLoginCarLoan(java.lang.String,java.lang.String)[pri:0, instance:basics.Day3@1aafa419]" started-at="2025-04-16T17:59:48 IST" name="webLoginCarLoan" finished-at="2025-04-16T17:59:48 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[qaclickacademy.com]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[12345]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- webLoginCarLoan -->
        <test-method is-config="true" signature="beforeEvery()[pri:0, instance:basics.Day3@1aafa419]" started-at="2025-04-16T17:59:48 IST" name="beforeEvery" finished-at="2025-04-16T17:59:48 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeEvery -->
        <test-method is-config="true" signature="afterEvery()[pri:0, instance:basics.Day3@1aafa419]" started-at="2025-04-16T17:59:48 IST" name="afterEvery" finished-at="2025-04-16T17:59:48 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEvery -->
        <test-method is-config="true" signature="afterClass()[pri:0, instance:basics.Day3@1aafa419]" started-at="2025-04-16T17:59:48 IST" name="afterClass" finished-at="2025-04-16T17:59:48 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
      </class> <!-- basics.Day3 -->
    </test> <!-- Car Loan -->
  </suite> <!-- Loan Department -->
</testng-results>
